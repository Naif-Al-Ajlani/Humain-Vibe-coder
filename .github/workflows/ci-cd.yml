name: Humain-Vibe-coder CI/CD
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  build-frontend:
    name: Build Frontend (Lovable Interface)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-development-conductor/frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: ai-development-conductor/frontend/package-lock.json

    - name: Install frontend dependencies
      run: npm ci

    - name: Run frontend linting
      run: |
        if npm run | grep -q "lint"; then
          npm run lint
        else
          echo "No lint script found for frontend"
        fi

    - name: Build frontend application
      run: |
        if npm run | grep -q "build"; then
          npm run build
        else
          echo "No build script found for frontend"
        fi

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-artifacts
        path: |
          ai-development-conductor/frontend/dist/
          ai-development-conductor/frontend/build/
        retention-days: 1

  build-backend:
    name: Build Backend (Replit API)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-development-conductor/backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: ai-development-conductor/backend/package-lock.json

    - name: Install backend dependencies
      run: npm ci

    - name: Run backend linting
      run: |
        if npm run | grep -q "lint"; then
          npm run lint
        else
          echo "No lint script found for backend"
        fi

    - name: Build backend application
      run: |
        if npm run | grep -q "build"; then
          npm run build
        else
          echo "No build script found for backend"
        fi

    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build-artifacts
        path: |
          ai-development-conductor/backend/dist/
          ai-development-conductor/backend/build/
        retention-days: 1

  test-frontend:
    name: Test Frontend Components
    runs-on: ubuntu-latest
    needs: build-frontend
    defaults:
      run:
        working-directory: ./ai-development-conductor/frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: ai-development-conductor/frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run frontend unit tests
      run: |
        if npm run | grep -q " test "; then
          npm test
        else
          echo "No test script found for frontend"
        fi

  test-backend:
    name: Test Backend API & AI Integration
    runs-on: ubuntu-latest
    needs: build-backend
    defaults:
      run:
        working-directory: ./ai-development-conductor/backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: ai-development-conductor/backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run backend unit tests
      run: |
        if npm run | grep -q " test "; then
          npm test
        else
          echo "No test script found for backend"
        fi

  security-scan:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ai-development-conductor/frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./ai-development-conductor/frontend
      run: npm ci

    - name: Frontend security audit
      working-directory: ./ai-development-conductor/frontend
      run: npm audit --audit-level=moderate || true

    - name: Setup Node.js for Backend
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ai-development-conductor/backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./ai-development-conductor/backend
      run: npm ci

    - name: Backend security audit
      working-directory: ./ai-development-conductor/backend
      run: npm audit --audit-level=moderate || true

  deploy-staging:
    name: Deploy to AI Development Staging
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, test-frontend, test-backend, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-humain-vibe-coder.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-artifacts
        path: ai-development-conductor/frontend/build/

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build-artifacts
        path: ai-development-conductor/backend/

    - name: Deploy frontend to staging
      env:
        LOVABLE_API_KEY: ${{ secrets.LOVABLE_STAGING_API_KEY }}
        STAGING_FRONTEND_URL: ${{ secrets.STAGING_FRONTEND_URL }}
      run: |
        echo "Deploying Lovable-built frontend to staging..."
        # Add Lovable-specific deployment commands here

    - name: Deploy backend to staging Replit
      env:
        REPLIT_TOKEN: ${{ secrets.REPLIT_STAGING_TOKEN }}
        REPLIT_PROJECT_ID: ${{ secrets.REPLIT_STAGING_PROJECT_ID }}
      run: |
        echo "Deploying backend API to Replit staging..."
        # Add Replit deployment commands here

    - name: Deploy n8n Workflows
      env:
        N8N_STAGING_API_KEY: ${{ secrets.N8N_STAGING_API_KEY }}
        N8N_STAGING_URL: ${{ secrets.N8N_STAGING_URL }}
      run: |
        echo "Deploying n8n AI workflows to staging..."
        # Add n8n deployment commands here

    - name: Run staging smoke tests
      run: |
        echo "Running AI platform staging verification..."
        # Add smoke tests here

  deploy-production:
    name: Deploy to AI Development Production
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, test-frontend, test-backend, security-scan]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://humain-vibe-coder.example.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build-artifacts
        path: ai-development-conductor/frontend/build/

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build-artifacts
        path: ai-development-conductor/backend/

    - name: Deploy frontend to production
      env:
        LOVABLE_API_KEY: ${{ secrets.LOVABLE_PRODUCTION_API_KEY }}
        PRODUCTION_FRONTEND_URL: ${{ secrets.PRODUCTION_FRONTEND_URL }}
      run: |
        echo "Deploying Lovable-built frontend to production..."
        # Add Lovable production deployment commands here

    - name: Deploy backend to production Replit
      env:
        REPLIT_TOKEN: ${{ secrets.REPLIT_PRODUCTION_TOKEN }}
        REPLIT_PROJECT_ID: ${{ secrets.REPLIT_PRODUCTION_PROJECT_ID }}
      run: |
        echo "Deploying backend API to Replit production..."
        # Add Replit production deployment commands here

    - name: Deploy AI workflows to production
      env:
        N8N_PRODUCTION_API_KEY: ${{ secrets.N8N_PRODUCTION_API_KEY }}
        N8N_PRODUCTION_URL: ${{ secrets.N8N_PRODUCTION_URL }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_PRODUCTION_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_PRODUCTION_API_KEY }}
      run: |
        echo "Deploying n8n AI workflows to production..."
        # Add n8n production deployment commands here

    - name: Run production health checks
      run: |
        echo "Running comprehensive AI platform health checks..."
        # Add production health checks here
